// üìÅ D:\AppDevelopment\instay-app\backend\controllers\complaintController.js

const Complaint = require('../models/Complaint');
const Student = require('../models/Student'); // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§Ü‡§¶‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∏‡•á ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º ‡§∏‡§ï‡§§‡§æ ‡§π‡•à

// ‚ûï Add a new complaint (‡§õ‡§æ‡§§‡•ç‡§∞ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)
exports.addComplaint = async (req, res) => {
    // req.user JWT ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ID ‡§î‡§∞ ‡§∞‡•ã‡§≤ ‡§π‡•ã‡§§‡§æ ‡§π‡•à
    // ‡§π‡§Æ ‡§Æ‡§æ‡§® ‡§∞‡§π‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§Ö‡§™‡§®‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§∏‡•á ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à
    const { studentId, category, description, space } = req.body;

    // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§π‡•à, ‡§§‡•ã ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§µ‡§π ‡§Ö‡§™‡§®‡•Ä ‡§π‡•Ä ‡§õ‡§æ‡§§‡•ç‡§∞ ID ‡§≠‡•á‡§ú ‡§∞‡§π‡§æ ‡§π‡•à
    // ‡§Ø‡§æ ‡§π‡§Æ req.user.student ‡§∏‡•á ‡§õ‡§æ‡§§‡•ç‡§∞ ID ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§Æ‡•â‡§°‡§≤ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§æ ‡§π‡•à
    if (req.user.role === 'Student' && req.user.student && req.user.student.toString() !== studentId) {
        return res.status(403).json({ message: 'Not authorized to create complaint for another student.' });
    }

    try {
        const newComplaint = new Complaint({
            student: studentId,
            category,
            description,
            space: space || null, // ‡§∏‡•ç‡§™‡•á‡§∏ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§π‡•à
        });
        const savedComplaint = await newComplaint.save();
        res.status(201).json(savedComplaint);
    } catch (err) {
        console.error('Error adding complaint:', err);
        res.status(500).json({ error: 'Failed to add complaint', details: err.message });
    }
};

// üìã Get all complaints (‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï‡•ã‡§Ç/‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ï‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è)
exports.getAllComplaints = async (req, res) => {
    try {
        // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        const complaints = await Complaint.find()
                                        .populate('student', 'firstName lastName roomNumber assignedSpace -_id') // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                                        .populate('space', 'roomNumber bedNumber monthlyRent -_id') // ‡§∏‡•ç‡§™‡•á‡§∏ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                                        .sort({ createdAt: -1 }); // ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç ‡§™‡§π‡§≤‡•á
        res.json(complaints);
    } catch (err) {
        console.error('Error fetching all complaints:', err);
        res.status(500).json({ error: 'Failed to fetch complaints', details: err.message });
    }
};

// üìã Get complaints by student ID (‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç ‡§¶‡•á‡§ñ‡§®‡•á ‡§π‡•á‡§§‡•Å)
exports.getComplaintsByStudent = async (req, res) => {
    const studentId = req.params.studentId;

    // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§™‡§®‡•Ä ‡§π‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç ‡§¶‡•á‡§ñ ‡§∞‡§π‡§æ ‡§π‡•à
    if (req.user.role === 'Student' && req.user.student && req.user.student.toString() !== studentId) {
        return res.status(403).json({ message: 'Not authorized to view complaints for another student.' });
    }

    try {
        const complaints = await Complaint.find({ student: studentId })
                                        .populate('student', 'firstName lastName roomNumber assignedSpace -_id')
                                        .populate('space', 'roomNumber bedNumber monthlyRent -_id')
                                        .sort({ createdAt: -1 });
        res.json(complaints);
    } catch (err) {
        console.error('Error fetching student complaints:', err);
        res.status(500).json({ error: 'Failed to fetch student complaints', details: err.message });
    }
};


// üîç Get a single complaint by ID
exports.getComplaintById = async (req, res) => {
    try {
        const complaint = await Complaint.findById(req.params.id)
                                        .populate('student', 'firstName lastName roomNumber assignedSpace -_id')
                                        .populate('space', 'roomNumber bedNumber monthlyRent -_id');
        if (!complaint) {
            return res.status(404).json({ message: 'Complaint not found.' });
        }

        // ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§è‡§ï ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§µ‡•á ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§‡•á‡§Ç ‡§¶‡•á‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
        if (req.user.role === 'Student' && req.user.student && complaint.student._id.toString() !== req.user.student.toString()) {
            return res.status(403).json({ message: 'Not authorized to view this complaint.' });
        }

        res.json(complaint);
    } catch (err) {
        console.error('Error fetching complaint by ID:', err);
        res.status(500).json({ error: 'Failed to fetch complaint', details: err.message });
    }
};

// ‚úèÔ∏è Update a complaint by ID (‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï/‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ï‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Ü‡§¶‡§ø ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
exports.updateComplaint = async (req, res) => {
    const { status, priority, estimatedResolutionTime, adminComments, studentFeedback, attachmentUrl } = req.body;
    try {
        const complaint = await Complaint.findById(req.params.id);
        if (!complaint) {
            return res.status(404).json({ message: 'Complaint not found.' });
        }

        // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§∂‡§ø‡§ï‡§æ‡§Ø‡§§ ‡§ï‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§¶‡§ø 'Open' ‡§π‡•à
        // ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï/‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ï ‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
        if (req.user.role === 'Student') {
            // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Ø‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
            if (studentFeedback !== undefined) {
                complaint.studentFeedback = studentFeedback;
            }
            if (description !== undefined && complaint.status === 'Open') {
                complaint.description = description;
            }
            // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á
        } else { // Admin, Manager, Warden
            if (status !== undefined) complaint.status = status;
            if (priority !== undefined) complaint.priority = priority;
            if (estimatedResolutionTime !== undefined) complaint.estimatedResolutionTime = estimatedResolutionTime;
            if (adminComments !== undefined) complaint.adminComments = adminComments;
            if (attachmentUrl !== undefined) complaint.attachmentUrl = attachmentUrl; // ‡§ú‡§¨ ‡§´‡§º‡§æ‡§á‡§≤ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã
            // ‡§Ø‡§¶‡§ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø 'Resolved' ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à ‡§î‡§∞ actualResolutionTime ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§Ö‡§≠‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            if (status === 'Resolved' && !complaint.actualResolutionTime) {
                complaint.actualResolutionTime = Date.now();
            }
            // ‡§Ø‡§¶‡§ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø 'Closed' ‡§™‡§∞ ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à ‡§î‡§∞ actualResolutionTime ‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§â‡§∏‡•á ‡§Ö‡§≠‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
            if (status === 'Closed' && !complaint.actualResolutionTime) {
                complaint.actualResolutionTime = Date.now();
            }
        }

        const updatedComplaint = await complaint.save();
        res.json(updatedComplaint);
    } catch (err) {
        console.error('Error updating complaint:', err);
        res.status(500).json({ error: 'Failed to update complaint', details: err.message });
    }
};

// üóëÔ∏è Delete a complaint by ID (‡§ï‡•á‡§µ‡§≤ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ‡§™‡§ï/‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ï‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ)
exports.deleteComplaint = async (req, res) => {
    try {
        // ‡§Ø‡§¶‡§ø ‡§∞‡•ã‡§≤ 'Admin' ‡§Ø‡§æ 'Manager' ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç (authorizeRoles ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à)
        const deletedComplaint = await Complaint.findByIdAndDelete(req.params.id);
        if (!deletedComplaint) {
            return res.status(404).json({ message: 'Complaint not found.' });
        }
        res.json({ message: 'Complaint deleted successfully.' });
    } catch (err) {
        console.error('Error deleting complaint:', err);
        res.status(500).json({ error: 'Failed to delete complaint', details: err.message });
    }
};