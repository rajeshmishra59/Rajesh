// üìÅ D:\AppDevelopment\instay-app\backend\controllers\paymentController.js

const Payment = require('../models/Payment'); // Payment ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
const Student = require('../models/Student'); // Student ‡§Æ‡•â‡§°‡§≤ ‡§ï‡•ã ‡§≠‡•Ä ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ studentId ‡§ï‡•ã ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡•á‡§Ç

// ‚ûï Add New Payment
exports.addPayment = async (req, res) => {
    try {
        const { student, amount, paymentDate, paymentMethod, transactionId, description } = req.body;

        // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠‡§ø‡§§ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
        const existingStudent = await Student.findById(student);
        if (!existingStudent) {
            return res.status(404).json({ message: 'Student not found.' });
        }

        const newPayment = new Payment({
            student,
            amount,
            paymentDate: paymentDate || Date.now(), // ‡§Ø‡§¶‡§ø paymentDate ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§§‡•ã ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§§‡§ø‡§•‡§ø ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
            paymentMethod,
            transactionId,
            description
        });

        const savedPayment = await newPayment.save();
        res.status(201).json(savedPayment);
    } catch (err) {
        console.error('Error adding payment:', err);
        if (err.code === 11000 && err.keyPattern && err.keyPattern.transactionId) {
            return res.status(400).json({ message: 'Duplicate Transaction ID.' });
        }
        res.status(500).json({ error: 'Failed to add payment', details: err.message });
    }
};

// üìã Get Payments for a Specific Student
exports.getPaymentsByStudentId = async (req, res) => {
    try {
        const { studentId } = req.params;

        // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
        const existingStudent = await Student.findById(studentId);
        if (!existingStudent) {
            return res.status(404).json({ message: 'Student not found.' });
        }

        const payments = await Payment.find({ student: studentId })
                                      .sort({ paymentDate: -1, createdAt: -1 }) // ‡§§‡§ø‡§•‡§ø ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§®‡§è ‡§∏‡•á ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§§‡§ï ‡§∏‡•â‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
                                      .populate('student', 'name email phone'); // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§à‡§Æ‡•á‡§≤ ‡§ï‡•ã ‡§≠‡•Ä ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç

        res.json(payments);
    } catch (err) {
        console.error('Error fetching payments by student ID:', err);
        res.status(500).json({ error: 'Failed to fetch payments', details: err.message });
    }
};

// üîç Get Single Payment by ID
exports.getPaymentById = async (req, res) => {
    try {
        const { id } = req.params;
        const payment = await Payment.findById(id).populate('student', 'name email phone');
        if (!payment) {
            return res.status(404).json({ message: 'Payment not found.' });
        }
        res.json(payment);
    } catch (err) {
        console.error('Error fetching payment by ID:', err);
        res.status(500).json({ error: 'Failed to fetch payment', details: err.message });
    }
};

// ‚úèÔ∏è Update Payment
exports.updatePayment = async (req, res) => {
    try {
        const { id } = req.params;
        const updatedPayment = await Payment.findByIdAndUpdate(id, req.body, { new: true });
        if (!updatedPayment) {
            return res.status(404).json({ message: 'Payment not found.' });
        }
        res.json(updatedPayment);
    } catch (err) {
        console.error('Error updating payment:', err);
        res.status(500).json({ error: 'Failed to update payment', details: err.message });
    }
};

// üóëÔ∏è Delete Payment (Optional: Hard Delete for Payments, or use isActive if needed)
// ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•â‡§´‡•ç‡§ü ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§®‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®‡•Ä‡§Ø ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
// ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•á‡§Ç ‡§§‡•ã ‡§Ü‡§™ isActive ‡§´‡•ç‡§≤‡•à‡§ó ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
exports.deletePayment = async (req, res) => {
    try {
        const { id } = req.params;
        const deletedPayment = await Payment.findByIdAndDelete(id);
        if (!deletedPayment) {
            return res.status(404).json({ message: 'Payment not found.' });
        }
        res.json({ message: 'Payment deleted successfully.' });
    } catch (err) {
        console.error('Error deleting payment:', err);
        res.status(500).json({ error: 'Failed to delete payment', details: err.message });
    }
};

// üìà Get All Payments (Optional: For admin dashboard)
// ‡§Ø‡§π ‡§∏‡§≠‡•Ä ‡§≠‡•Å‡§ó‡§§‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à, ‡§® ‡§ï‡§ø ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
exports.getAllPayments = async (req, res) => {
    try {
        const payments = await Payment.find()
                                      .sort({ paymentDate: -1, createdAt: -1 })
                                      .populate('student', 'name email phone collegeName'); // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•â‡§™‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        res.json(payments);
    } catch (err) {
        console.error('Error fetching all payments:', err);
        res.status(500).json({ error: 'Failed to fetch all payments', details: err.message });
    }
};