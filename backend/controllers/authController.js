// üìÅ D:\AppDevelopment\instay-app\backend\controllers\authController.js

const User = require('../models/User');
const generateToken = require('../utils/generateToken'); // JWT ‡§ú‡§®‡§∞‡•á‡§ü‡§∞ ‡§ï‡•ã ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç

// üîë Register a new user (‡§ï‡•á‡§µ‡§≤ ‡§™‡§π‡§≤‡§æ ‡§è‡§°‡§Æ‡§ø‡§® ‡§Ø‡•Ç‡§ú‡§∞ ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§Ø‡§æ ‡§∞‡•ã‡§≤ ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à)
exports.registerUser = async (req, res) => {
    const { username, password, role, studentId } = req.body;

    // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï 'Admin' ‡§Ø‡•Ç‡§ú‡§∞ ‡§π‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§Æ‡•á‡§Ç ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§è, ‡§Ø‡§æ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
    // ‡§Ü‡§™ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§¨‡•á‡§π‡§§‡§∞ ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§´‡•ç‡§≤‡•ã ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§π‡§æ‡§Ç Admin ‡§π‡•Ä ‡§Ö‡§®‡•ç‡§Ø ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§¨‡§®‡§æ ‡§∏‡§ï‡•á
    if (role === 'Admin') {
        const adminExists = await User.findOne({ role: 'Admin' });
        if (adminExists) {
            return res.status(400).json({ message: 'Admin user already exists. Cannot create another Admin directly.' });
        }
    }

    try {
        const userExists = await User.findOne({ username });

        if (userExists) {
            return res.status(400).json({ message: 'User already exists.' });
        }

        const user = await User.create({
            username,
            password, // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° pre-save ‡§π‡•Å‡§ï ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§π‡•à‡§∂ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ
            role: role || 'Student', // ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à, ‡§§‡•ã ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü 'Student'
            student: studentId || null, // ‡§Ø‡§¶‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§π‡•à ‡§§‡•ã studentId ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        });

        if (user) {
            res.status(201).json({
                _id: user._id,
                username: user.username,
                role: user.role,
                token: generateToken(user._id, user.role), // JWT ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                student: user.student,
            });
        } else {
            res.status(400).json({ message: 'Invalid user data.' });
        }
    } catch (error) {
        console.error('Error registering user:', error);
        res.status(500).json({ error: 'Server error during registration.', details: error.message });
    }
};

// üîí Authenticate user & get token (login)
exports.authUser = async (req, res) => {
    const { username, password } = req.body;

    try {
        const user = await User.findOne({ username });

        if (user && (await user.matchPassword(password))) {
            res.json({
                _id: user._id,
                username: user.username,
                role: user.role,
                token: generateToken(user._id, user.role), // JWT ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                student: user.student,
            });
        } else {
            res.status(401).json({ message: 'Invalid username or password.' });
        }
    } catch (error) {
        console.error('Error authenticating user:', error);
        res.status(500).json({ error: 'Server error during authentication.', details: error.message });
    }
};

// üë§ Get user profile (authenticated user only)
exports.getUserProfile = async (req, res) => {
    // req.user JWT ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§∏‡•á ‡§Ü‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§Ø‡•Ç‡§ú‡§∞ ID ‡§î‡§∞ ‡§∞‡•ã‡§≤ ‡§ï‡•ã ‡§Ö‡§ü‡•à‡§ö ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
    const user = await User.findById(req.user.id).select('-password'); // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞

    if (user) {
        res.json({
            _id: user._id,
            username: user.username,
            role: user.role,
            student: user.student,
        });
    } else {
        res.status(404).json({ message: 'User not found.' });
    }
};