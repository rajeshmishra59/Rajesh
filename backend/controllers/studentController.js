// 📁 D:\AppDevelopment\instay-app\backend\controllers\studentController.js

const Student = require('../models/Student');
const Space = require('../models/Space'); // Assuming Space model is needed for some student-related operations, like checking bed availability

// New controller for enrolling a student with basic details
exports.enrollStudent = async (req, res) => {
    try {
        const { name, email, phone } = req.body;

        // Basic validation
        if (!name || !phone) {
            return res.status(400).json({ message: 'Name and Phone Number are required for enrollment.' });
        }

        // Check if phone number already exists
        const existingStudent = await Student.findOne({ phone });
        if (existingStudent) {
            return res.status(409).json({ message: 'Student with this phone number already exists.' });
        }

        // Create a new student with only basic details
        // studentUID will be generated by the pre-save hook in the model
        const newStudent = new Student({
            name,
            email,
            phone,
            status: 'Enrolled' // Set initial status
        });

        await newStudent.save();

        res.status(201).json({
            message: 'Student enrolled successfully!',
            student: {
                _id: newStudent._id,
                name: newStudent.name,
                email: newStudent.email,
                phone: newStudent.phone,
                studentUID: newStudent.studentUID, // Return the generated UID
                status: newStudent.status
            }
        });

    } catch (error) {
        console.error('Error enrolling student:', error);
        res.status(500).json({ message: 'Server error during student enrollment.', error: error.message });
    }
};


// Existing addStudent function (can be modified later to update full profile)
exports.addStudent = async (req, res) => {
    try {
        const newStudent = new Student(req.body);
        await newStudent.save();
        res.status(201).json({ message: 'Student added successfully!', student: newStudent });
    } catch (error) {
        console.error('Error adding student:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};

// Get all students
exports.getAllStudents = async (req, res) => {
    try {
        const students = await Student.find();
        res.status(200).json(students);
    } catch (error) {
        console.error('Error fetching students:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};

// Get a single student by ID
exports.getStudentById = async (req, res) => {
    try {
        const student = await Student.findById(req.params.id);
        if (!student) {
            return res.status(404).json({ message: 'Student not found.' });
        }
        res.status(200).json(student);
    } catch (error) {
        console.error('Error fetching student by ID:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};

// Update a student
exports.updateStudent = async (req, res) => {
    try {
        const updatedStudent = await Student.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
        if (!updatedStudent) {
            return res.status(404).json({ message: 'Student not found.' });
        }
        res.status(200).json({ message: 'Student updated successfully!', student: updatedStudent });
    } catch (error) {
        console.error('Error updating student:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};

// Delete a student
exports.deleteStudent = async (req, res) => {
    try {
        const deletedStudent = await Student.findByIdAndDelete(req.params.id);
        if (!deletedStudent) {
            return res.status(404).json({ message: 'Student not found.' });
        }
        res.status(200).json({ message: 'Student deleted successfully!' });
    } catch (error) {
        console.error('Error deleting student:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};

// Get students by status (new endpoint for filtering)
exports.getStudentsByStatus = async (req, res) => {
    try {
        const { status } = req.query; // status will be passed as a query parameter, e.g., /api/students/status?status=Active
        if (!status) {
            return res.status(400).json({ message: 'Status query parameter is required.' });
        }
        const students = await Student.find({ status: status });
        res.status(200).json(students);
    } catch (error) {
        console.error('Error fetching students by status:', error);
        res.status(500).json({ message: 'Server error.', error: error.message });
    }
};