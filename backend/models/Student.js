// üìÅ D:\AppDevelopment\instay-app\backend\models\Student.js

const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
    // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ (‡§®‡§æ‡§Æ‡§æ‡§Ç‡§ï‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï)
    name: {
        type: String,
        required: true,
        trim: true,
    },
    email: {
        type: String,
        trim: true,
        lowercase: true,
        // unique: true, // ‡§à‡§Æ‡•á‡§≤ ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§≠‡•Ä ‡§á‡§∏‡•á ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á
        // ‡§Ø‡§¶‡§ø ‡§Ü‡§™ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§π‡§∞ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§π‡•ã, ‡§§‡•ã ‡§á‡§∏‡•á uncomment ‡§ï‡§∞‡•á‡§Ç
    },
    phone: {
        type: String,
        required: true,
        trim: true,
        unique: true, // ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è (‡§®‡§æ‡§Æ‡§æ‡§Ç‡§ï‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§™‡§π‡§ö‡§æ‡§®‡§ï‡§∞‡•ç‡§§‡§æ)
    },
    // ‚ú® ‡§®‡§Ø‡§æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§°: ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§§‡§∞‡§´ ‡§∏‡•á ‡§è‡§ï ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§õ‡§æ‡§§‡•ç‡§∞ ID ‚ú®
    studentUID: {
        type: String,
        unique: true,
        trim: true,
    },
    
    // ‡§Ø‡•á ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ö‡§¨ ‡§®‡§æ‡§Æ‡§æ‡§Ç‡§ï‡§® ‡§ï‡•á ‡§∏‡§Æ‡§Ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç, ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã‡§Ç‡§ó‡•á
    college: {
        type: String,
        trim: true,
    },
    currentAddress: {
        type: String,
        trim: true,
    },
    permanentAddress: {
        type: String,
        trim: true,
    },
    emergencyContactName: {
        type: String,
        trim: true,
    },
    emergencyContactPhone: {
        type: String,
        trim: true,
    },
    dateOfBirth: {
        type: Date,
    },
    nationality: {
        type: String,
        trim: true,
        default: 'Indian', // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø‡§§‡§æ
    },
    guardianName: {
        type: String,
        trim: true,
    },
    guardianPhone: {
        type: String,
        trim: true,
    },
    
    // ‚ú® ‡§Ø‡•á ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ö‡§¨ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§π‡•ã‡§Ç‡§ó‡•á, ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó/‡§Ö‡§≤‡•â‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ö‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§≠‡§∞ ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á ‚ú®
    checkInDate: { // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§ö‡•á‡§ï-‡§á‡§® ‡§ï‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§§‡§ø‡§•‡§ø
        type: Date,
        default: null,
    },
    checkOutDate: { // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§ö‡•á‡§ï-‡§Ü‡§â‡§ü ‡§ï‡•Ä ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§§‡§ø‡§•‡§ø
        type: Date,
        default: null,
    },
    bookingAmount: { // ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∞‡§æ‡§∂‡§ø ‡§ú‡•ã ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ú‡§Æ‡§æ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à
        type: Number,
        default: 0,
        min: 0,
    },
    // ‚ú® NEW: Payment Mode Field for Booking ‚ú®
    paymentMode: {
        type: String,
        enum: ['Cash', 'Online Transfer', 'Card', 'UPI', 'Cheque', 'Other'], // ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞
        default: null,
    },
    // ‚ú® NEW: Payment Date Field for Booking ‚ú®
    paymentDate: {
        type: Date,
        default: null,
    },
    assignedSpace: { // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§¨‡•á‡§°/‡§ï‡§Æ‡§∞‡§æ
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Space',
        default: null, // ‡§ú‡§¨ ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∏‡•ç‡§™‡•á‡§∏ ‡§Ö‡§∏‡§æ‡§á‡§® ‡§® ‡§π‡•ã, ‡§§‡§¨ ‡§§‡§ï null
    },
    isActive: { // ‡§Ø‡§π ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§∞‡§π ‡§∞‡§π‡§æ ‡§π‡•à ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç (‡§∏‡•â‡§´‡•ç‡§ü-‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø)
        type: Boolean,
        default: true,
    },
    // ‚ú® ‡§®‡§Ø‡§æ ‡§´‡§º‡•Ä‡§≤‡•ç‡§°: ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‚ú®
    status: {
        type: String,
        enum: ['Enrolled', 'Booked', 'Active', 'Checked Out', 'Left'], // 'Left' ‡§ú‡•ã‡§°‡§º‡§æ ‡§§‡§æ‡§ï‡§ø ‡§™‡§§‡§æ ‡§ö‡§≤‡•á ‡§ï‡§ø ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§π‡•â‡§∏‡•ç‡§ü‡§≤ ‡§∏‡•á ‡§ö‡§≤‡§æ ‡§ó‡§Ø‡§æ
        default: 'Enrolled', // ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø 'Enrolled'
    },
}, {
    timestamps: true, // createdAt ‡§î‡§∞ updatedAt ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à
});

// ‚ú® ‡§®‡§Ø‡§æ: ‡§õ‡§æ‡§§‡•ç‡§∞UID ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•Ä-‡§∏‡•á‡§µ ‡§π‡•Å‡§ï ‚ú®
studentSchema.pre('save', async function(next) {
    // ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ studentUID ‡§®‡§Ø‡§æ ‡§π‡•ã
    if (this.isNew && !this.studentUID) {
        // ‡§è‡§ï ‡§∏‡§æ‡§ß‡§æ‡§∞‡§£ ‡§Ö‡§≤‡•ç‡§´‡§º‡§æ‡§®‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§∞‡§ø‡§ï ID ‡§ú‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        this.studentUID = `STU-${Date.now().toString().slice(-6)}-${Math.random().toString(36).substr(2, 4).toUpperCase()}`;
    }
    next();
});

module.exports = mongoose.model('Student', studentSchema);