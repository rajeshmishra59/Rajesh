// üìÅ D:\AppDevelopment\instay-app\backend\models\Space.js

const mongoose = require('mongoose');

const spaceSchema = new mongoose.Schema({
    roomNumber: {
        type: String,
        required: true,
        trim: true,
        uppercase: true, // Rooms might be R101, R102 etc.
    },
    bedNumber: { // Unique identifier for a specific bed within a room
        type: String,
        required: true,
        trim: true,
        uppercase: true, // E.g., B1, B2, B3
    },
    sharingType: { // Type of sharing for this specific bed/space
        type: String,
        enum: ['Single', 'Double', 'Triple', 'Quad'], // You can add more as needed
        required: true,
    },
    monthlyRent: { // Rent for this specific bed (e.g., per bed in a double-sharing room)
        type: Number,
        required: true,
        min: 0,
    },
    isOccupied: { // Flag to quickly check if this bed is occupied
        type: Boolean,
        default: false,
    },
    occupiedBy: { // Reference to the student occupying this bed
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Student',
        default: null,
        // ‚ú® UNIQUE: TRUE ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§π‡§ü‡§æ ‡§¶‡•á‡§Ç!
        // unique: true, // <-- ‡§Ø‡§π ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§™‡•à‡§¶‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§•‡§æ
        // ‡§π‡§Æ ‡§á‡§∏ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§ï‡•ã ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤‡§∞ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‡§ú‡§¨ ‡§π‡§Æ ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§∏‡•ç‡§™‡•á‡§∏ ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
        sparse: true // ‡§Ø‡§π ‡§†‡•Ä‡§ï ‡§π‡•à, null ‡§Æ‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡§æ
    },
    status: { // More detailed status for the bed
        type: String,
        enum: ['Available', 'Occupied', 'Under Maintenance', 'Booked'], // 'Booked' for advance bookings
        default: 'Available',
    },
    description: { // Any additional notes about the space
        type: String,
        trim: true,
    }
}, {
    timestamps: true, // Adds createdAt and updatedAt
});

// Ensure that roomNumber + bedNumber combination is unique
// This prevents having "R101 B1" twice.
spaceSchema.index({ roomNumber: 1, bedNumber: 1 }, { unique: true });

// ‚ú® ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï (‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§): ‡§è‡§ï ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•ã ‡§è‡§ï ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§¨‡•á‡§° ‡§Ö‡§∏‡§æ‡§á‡§® ‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è,
// ‡§á‡§∏‡•á ‡§è‡§ï ‡§Ö‡§≤‡§ó ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§ó‡•à‡§∞-‡§∂‡•Ç‡§®‡•ç‡§Ø ‡§Æ‡§æ‡§®‡•ã‡§Ç ‡§™‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à
spaceSchema.index({ occupiedBy: 1 }, { unique: true, sparse: true });


module.exports = mongoose.model('Space', spaceSchema);