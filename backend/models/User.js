// üìÅ D:\AppDevelopment\instay-app\backend\models\User.js

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs'); // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§π‡•à‡§∂‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è

const userSchema = new mongoose.Schema({
    username: {
        type: String,
        required: true,
        unique: true, // ‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ ‡§Ö‡§¶‡•ç‡§µ‡§ø‡§§‡•Ä‡§Ø ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è
        trim: true,
    },
    password: {
        type: String,
        required: true,
    },
    role: { // ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ (‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§Ç‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è)
        type: String,
        enum: ['Admin', 'Manager', 'Warden', 'Student'], // ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§è‡§Å
        default: 'Student', // ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ 'Student'
        required: true,
    },
    // ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ ‡§∏‡•ç‡§ü‡•Ç‡§°‡•á‡§Ç‡§ü ‡§Æ‡•â‡§°‡§≤ ‡§∏‡•á ‡§á‡§∏‡•á ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
    student: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Student',
        default: null, // ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§è‡§ï ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§Ø‡§π ‡§∏‡•ç‡§ü‡•Ç‡§°‡•á‡§Ç‡§ü ID ‡§π‡•ã‡§ó‡•Ä
    }
}, {
    timestamps: true, // createdAt ‡§î‡§∞ updatedAt ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ú‡•ã‡§°‡§º‡§§‡§æ ‡§π‡•à
});

// ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§â‡§∏‡•á ‡§π‡•à‡§∂ ‡§ï‡§∞‡•á‡§Ç
userSchema.pre('save', async function(next) {
    if (!this.isModified('password')) { // ‡§ï‡•á‡§µ‡§≤ ‡§§‡§≠‡•Ä ‡§π‡•à‡§∂ ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§¨‡§¶‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•ã ‡§Ø‡§æ ‡§®‡§Ø‡§æ ‡§π‡•ã
        return next();
    }
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
});

// ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§µ‡§ø‡§ß‡§ø (login ‡§ï‡•á ‡§≤‡§ø‡§è)
userSchema.methods.matchPassword = async function(enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model('User', userSchema);