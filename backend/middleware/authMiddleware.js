// üìÅ D:\AppDevelopment\instay-app\backend\middleware\authMiddleware.js

const jwt = require('jsonwebtoken');
const User = require('../models/User'); 
// ‚ú® UPDATED: Corrected path for ErrorHandler and catchAsyncError ‚ú®
// 'middleware' ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§∏‡•á 'utils' ‡§´‡§º‡•ã‡§≤‡•ç‡§°‡§∞ ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï '../' ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§
const ErrorHandler = require('../utils/errorHandler'); 
const catchAsyncError = require('../utils/catchAsyncError'); // ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ 'catchAsyncError' (singular) ‡§π‡•à


// Middleware to check if user is authenticated (‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
// ‡§Ø‡§π catchAsyncError HOC (Higher-Order Component) ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
exports.isAuthenticatedUser = catchAsyncError(async (req, res, next) => {
    // ‡§ï‡•Å‡§ï‡•Ä‡§ú‡§º ‡§∏‡•á ‡§ü‡•ã‡§ï‡§® ‡§≤‡•á‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
    const { token } = req.cookies; 

    // Authorization ‡§π‡•á‡§°‡§∞ ‡§∏‡•á ‡§ü‡•ã‡§ï‡§® ‡§≤‡•á‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§∏‡•á 'Bearer TOKEN')
    let authorizationHeader = req.headers.authorization;
    let tokenFromHeader;

    if (authorizationHeader && authorizationHeader.startsWith('Bearer')) {
        tokenFromHeader = authorizationHeader.split(' ')[1];
    }

    // ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§ü‡•ã‡§ï‡§® (‡§ú‡•ã ‡§≠‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã)
    const finalToken = token || tokenFromHeader; 

    if (!finalToken) {
        return next(new ErrorHandler('‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§', 401));
    }

    try {
        // JWT ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
        const decodedData = jwt.verify(finalToken, process.env.JWT_SECRET);
        
        // ‡§°‡§ø‡§ï‡•ã‡§° ‡§ï‡§ø‡§è ‡§ó‡§è ID ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§ñ‡•ã‡§ú‡•á‡§Ç
        req.user = await User.findById(decodedData.id);

        if (!req.user) {
            return next(new ErrorHandler('‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡•É‡§§ ‡§®‡§π‡•Ä‡§Ç: ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', 401));
        }

        // ‡§ü‡•ã‡§ï‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§∞‡•ã‡§≤ ‡§ï‡•ã req.user ‡§™‡§∞ ‡§Ö‡§∏‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç (‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§∞‡•ã‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü‡•á‡§° ‡§π‡•ã)
        req.user.role = decodedData.role; 

        next(); // ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§Ø‡§æ ‡§∞‡§æ‡§â‡§ü ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å

    } catch (error) {
        console.error('‡§ü‡•ã‡§ï‡§® ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡§æ:', error.message); 
        return next(new ErrorHandler('‡§Ö‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§ü‡•ã‡§ï‡§®‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§', 401));
    }
});


// Middleware to authorize user roles (‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
exports.authorizeRoles = (...roles) => {
    // ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ö‡§®‡•Å‡§Æ‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§è‡§Ç ‡§è‡§ï ‡§´‡•ç‡§≤‡•à‡§ü ‡§∏‡§∞‡§£‡•Ä ‡§π‡•à‡§Ç
    const allowedRoles = roles.flat(); 

    return (req, res, next) => {
        // ‡§Ø‡§¶‡§ø req.user ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•Ä ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
        if (!req.user || !allowedRoles.includes(req.user.role)) { 
            const userRole = req.user && req.user.role ? req.user.role : 'None';
            return next(
                new ErrorHandler(
                    `‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ: ${userRole} ‡§ï‡•ã ‡§á‡§∏ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§® ‡§§‡§ï ‡§™‡§π‡•Å‡§Å‡§ö‡§®‡•á ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§`, 
                    403 // 403 Forbidden ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã‡§°
                )
            );
        }
        next(); // ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§Ø‡§æ ‡§∞‡§æ‡§â‡§ü ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å
    };
};
