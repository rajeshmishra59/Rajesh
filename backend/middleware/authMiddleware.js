// üìÅ D:\AppDevelopment\instay-app\backend\middleware/authMiddleware.js

const jwt = require('jsonwebtoken');
const User = require('../models/User');

// ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§≤‡•â‡§ó ‡§á‡§® ‡§π‡•à
const protect = async (req, res, next) => {
    let token;

    // HTTP ‡§π‡•á‡§°‡§∞ ‡§Æ‡•á‡§Ç 'Authorization' ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§∏‡•á ‡§ü‡•ã‡§ï‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§Å‡§ö ‡§ï‡§∞‡•á‡§Ç
    // ‡§Ø‡§π 'Bearer TOKEN_STRING' ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            // 'Bearer' ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§π‡§ü‡§æ‡§ï‡§∞ ‡§ü‡•ã‡§ï‡§® ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
            token = req.headers.authorization.split(' ')[1];

            // ‡§ü‡•ã‡§ï‡§® ‡§ï‡•ã ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            // ‡§Ø‡•Ç‡§ú‡§∞ ID ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§∏‡•á ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
            const userFromDB = await User.findById(decoded.id).select('-password'); // ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§ï‡•ã ‡§õ‡•ã‡§°‡§º‡§ï‡§∞

            if (!userFromDB) {
                // ‡§Ø‡§¶‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à
                return res.status(401).json({ message: 'Not authorized, user not found.' });
            }

            // ‚ú® UPDATED: req.user ‡§ï‡•ã ‡§è‡§ï ‡§™‡•ç‡§≤‡•á‡§® ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∞‡•ã‡§≤ ‡§≠‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã ‚ú®
            req.user = {
                _id: userFromDB._id,
                username: userFromDB.username,
                role: decoded.role, // ‡§ü‡•ã‡§ï‡§® ‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§∞‡•ã‡§≤ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç, ‡§Ø‡§π ‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§π‡•à
                // ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•ã userFromDB ‡§∏‡•á ‡§Ö‡§®‡•ç‡§Ø ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
            };

            next(); // ‡§Ö‡§ó‡§≤‡•á ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞/‡§∞‡§æ‡§â‡§ü ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å
        } catch (error) {
            console.error('Not authorized, token failed:', error.message);
            res.status(401).json({ message: 'Not authorized, token failed.' });
        }
    } else { // ‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à ‡§ü‡•ã‡§ï‡§® ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
        res.status(401).json({ message: 'Not authorized, no token.' });
    }
};

// ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Æ‡§ø‡§°‡§ø‡§≤‡§µ‡•á‡§Ø‡§∞ ‡§ï‡§ø ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ ‡§π‡•à
const authorizeRoles = (...roles) => {
    return (req, res, next) => {
        // ‡§Ö‡§¨ req.user ‡§π‡§Æ‡•á‡§∂‡§æ ‡§è‡§ï ‡§™‡•ç‡§≤‡•á‡§® ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§ó‡§æ ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç req.user.role ‡§∏‡§π‡•Ä ‡§π‡•ã‡§ó‡§æ
        if (!req.user || !roles.includes(req.user.role)) {
            return res.status(403).json({ message: `User role ${req.user && req.user.role ? req.user.role : 'unauthorized'} is not authorized to access this route.` });
        }
        next();
    };
};

module.exports = { protect, authorizeRoles };