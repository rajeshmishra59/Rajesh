// ЁЯУБ backend/routes/spaceRoutes.js

const express = require('express');
// тЬи рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реБрдзрд╛рд░: authmiddleware.js рдлрд╝рд╛рдЗрд▓ рдХрд╛ рд╕рд╣реА рдирд╛рдо рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ тЬи
const { isAuthenticatedUser, authorizeRoles } = require('../middleware/authMiddleware.js'); 
const {
    addSpace,
    getAllSpaces,
    getSpaceById,
    updateSpace,
    deleteSpace,
    getAvailableSpaces, 
    bookSpace,          
    assignSpaceToStudent 
} = require('../controllers/spaceController');

const router = express.Router();

// -----------------------------------------------------------------------------
// рд╕реНрдкреЗрд╕ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд░реВрдЯреНрд╕
// -----------------------------------------------------------------------------

// рдирдпрд╛ GET route: рд╕рднреА рд╕реНрдкреЗрд╕реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдПрдбрдорд┐рди, рдореИрдиреЗрдЬрд░, рд╡рд╛рд░реНрдбрди рдЕрдиреБрдорддрд┐) - /api/spaces рдкрд░ рдХрд╛рдо рдХрд░реЗрдЧрд╛
router.get('/', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), getAllSpaces);

// рдПрдХ рдирдпрд╛ рд╕реНрдкреЗрд╕ рдЬреЛрдбрд╝реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди, рдореИрдиреЗрдЬрд░ рдЕрдиреБрдорддрд┐)
router.post('/admin/space/new', isAuthenticatedUser, authorizeRoles('Admin', 'Manager'), addSpace);

// рд╕рднреА рд╕реНрдкреЗрд╕реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдПрдбрдорд┐рди, рдореИрдиреЗрдЬрд░, рд╡рд╛рд░реНрдбрди рдЕрдиреБрдорддрд┐) - admin path рд╡рд╛рд▓рд╛ рднреА рд░рдЦрд╛ рд╣реИ, backward compatibility рдХреЗ рд▓рд┐рдП
router.get('/admin/spaces', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), getAllSpaces);

// ID рджреНрд╡рд╛рд░рд╛ рдПрдХ рд╕рд┐рдВрдЧрд▓ рд╕реНрдкреЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдПрдбрдорд┐рди, рдореИрдиреЗрдЬрд░, рд╡рд╛рд░реНрдбрди рдЕрдиреБрдорддрд┐)
router.get('/admin/space/:id', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), getSpaceById);

// рд╕реНрдкреЗрд╕ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ (рдПрдбрдорд┐рди, рдореИрдиреЗрдЬрд░ рдЕрдиреБрдорддрд┐)
router.put('/admin/space/:id', isAuthenticatedUser, authorizeRoles('Admin', 'Manager'), updateSpace);

// рд╕реНрдкреЗрд╕ рдбрд┐рд▓реАрдЯ рдХрд░реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐)
router.delete('/admin/space/:id', isAuthenticatedUser, authorizeRoles('Admin'), deleteSpace);

// -----------------------------------------------------------------------------
// рдмреБрдХрд┐рдВрдЧ рдФрд░ рдЕрд╕рд╛рдЗрдирдореЗрдВрдЯ рдХреЗ рд▓рд┐рдП рдирдП рд░реВрдЯреНрд╕
// -----------------------------------------------------------------------------

// рд╕рднреА рдЙрдкрд▓рдмреНрдз рд╕реНрдкреЗрд╕реЗрд╕ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рдмреБрдХрд┐рдВрдЧ рдлреЙрд░реНрдо рдХреЗ рд▓рд┐рдП)
router.get('/admin/spaces/available', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), getAvailableSpaces);

// рдПрдХ рд╕реНрдкреЗрд╕ рдмреБрдХ рдХрд░реЗрдВ (рдмреБрдХрд┐рдВрдЧ рд░рд╛рд╢рд┐ рдФрд░ рднреБрдЧрддрд╛рди рд╡рд┐рд╡рд░рдг рдХреЗ рд╕рд╛рде)
router.post('/admin/space/book', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), bookSpace);

// рдПрдХ рдмреБрдХ рдХрд┐рдП рдЧрдП рд╕реНрдкреЗрд╕ рдХреЛ рдЫрд╛рддреНрд░ рдХреЛ рдЕрд╕рд╛рдЗрди рдХрд░реЗрдВ (рдЪреЗрдХ-рдЗрди рдФрд░ рдЕрдВрддрд┐рдо рдЕрд╕рд╛рдЗрдирдореЗрдВрдЯ)
router.put('/admin/space/assign', isAuthenticatedUser, authorizeRoles('Admin', 'Manager', 'Warden'), assignSpaceToStudent);

module.exports = router;
